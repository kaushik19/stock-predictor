version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: stock-predictor-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: stock-predictor
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - stock-predictor-network

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: stock-predictor-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    networks:
      - stock-predictor-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: stock-predictor-backend
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      NODE_ENV: development
      PORT: 5001
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/stock-predictor?authSource=admin
      REDIS_URL: redis://:redis123@redis:6379
      JWT_SECRET: your-super-secret-jwt-key-for-development
      JWT_EXPIRE: 7d
      CLIENT_URL: http://localhost:3000
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - stock-predictor-network
    command: npm run dev

  # Frontend (Vue.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: stock-predictor-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      VITE_API_URL: http://localhost:5001/api
      VITE_SOCKET_URL: http://localhost:5001
      NODE_ENV: development
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - stock-predictor-network
    stdin_open: true
    tty: true

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  stock-predictor-network:
    driver: bridge